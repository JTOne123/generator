// ReSharper disable All

using System;
using System.Linq;
using System.Web;
using System.Web.Http;
using System.Web.Mvc;
using KY.Generator;
using KY.Generator.Output;

namespace KY.Generator.Test.Controllers
{
    public partial class GeneratorController : ApiController
    {
        [ValidateInput(false)]
        public string Create(string configuration)
        {
            string id = Guid.NewGuid().ToString();
            MemoryOutput output = new MemoryOutput();
            Generator generator = new Generator();
            generator.SetOutput(output);
            generator.PreloadModule<KY.Generator.Csharp.CsharpModule>();
            generator.PreloadModule<KY.Generator.TypeScript.TypeScriptModule>();
            generator.PreloadModule<KY.Generator.Reflection.ReflectionModule>();
            generator.PreloadModule<KY.Generator.AspDotNet.AspDotNetModule>();
            generator.ParseConfiguration(configuration);
            generator.Run();

            HttpContext.Current.Cache[id] = output;
            return id;
        }

        public string Command(string command)
        {
            string id = Guid.NewGuid().ToString();
            MemoryOutput output = new MemoryOutput();
            Generator generator = new Generator();
            generator.SetOutput(output);
            generator.PreloadModule<KY.Generator.Csharp.CsharpModule>();
            generator.PreloadModule<KY.Generator.TypeScript.TypeScriptModule>();
            generator.PreloadModule<KY.Generator.Reflection.ReflectionModule>();
            generator.PreloadModule<KY.Generator.AspDotNet.AspDotNetModule>();
            generator.ParseCommand(command);
            generator.Run();

            HttpContext.Current.Cache[id] = output;
            return id;
        }

        public string GetFiles(string id)
        {
            if (id == null)
            {
                return null;
            }
            MemoryOutput output = HttpContext.Current.Cache[id] as MemoryOutput;
            return output == null ? null : string.Join(Environment.NewLine, output.Files.Select(x => x.Key));
        }

        public string GetFile(string id, string path)
        {
            if (id == null)
            {
                return null;
            }
            MemoryOutput output = HttpContext.Current.Cache[id] as MemoryOutput;
            return output == null || ! output.Files.ContainsKey(path) ? null : output.Files[path];
        }

        public bool Available()
        {
            return true;
        }
    }
}