<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ODataController" xml:space="preserve">
    <value>protected TRepository Repository { get; }

        protected ODataController(TRepository repository = default(TRepository))
        {
            this.Repository = repository;
        }

        protected IQueryable&lt;TItem&gt; GetInternal()
        {
            try
            {
                this.OnGetting();
                IQueryable&lt;TItem&gt; result = this.Repository.Read();
                return this.OnGetted(result);
            }
            catch (Exception exception)
            {
                this.OnGetError(exception);
                throw;
            }
        }

        protected virtual void OnGetting()
        { }

        protected virtual IQueryable&lt;TItem&gt; OnGetted(IQueryable&lt;TItem&gt; result)
        {
            return result;
        }

        protected virtual void OnGetError(Exception exception)
        { }

        protected TItem GetInternal(params object[] key)
        {
            try
            {
                this.OnGetting(key);
                return this.OnGetted(this.Repository.Read(key));
            }
            catch (Exception exception)
            {
                this.OnGetError(exception, key);
                throw;
            }
        }

        protected virtual void OnGetting(params object[] key)
        { }

        protected virtual TItem OnGetted(TItem result)
        {
            return result;
        }

        protected virtual void OnGetError(Exception exception, object[] key)
        { }

        protected IHttpActionResult PostInternal(TItem item)
        {
            try
            {
                this.OnPosting(item);
                if (!this.ModelState.IsValid)
                {
                    return this.BadRequest(this.ModelState);
                }
                this.Repository.Create(item);
                return this.OnPosted(this.Created(item));
            }
            catch (Exception exception)
            {
                this.OnPostError(exception, item);
                throw;
            }
        }

        protected virtual void OnPosting(TItem item)
        { }

        protected virtual IHttpActionResult OnPosted(CreatedODataResult&lt;TItem&gt; result)
        {
            return result;
        }

        protected virtual void OnPostError(Exception exception, TItem item)
        { }

        protected IHttpActionResult DeleteInternal(params object[] key)
        {
            try
            {
                this.OnDeleting(key);
                this.Repository.Delete(key);
                return this.OnDeleted(this.Content(HttpStatusCode.NoContent, "Deleted"));
            }
            catch (Exception exception)
            {
                this.OnDeleteError(exception, key);
                throw;
            }
        }

        protected virtual void OnDeleting(object[] key)
        { }

        protected virtual IHttpActionResult OnDeleted(NegotiatedContentResult&lt;string&gt; result)
        {
            return result;
        }

        protected virtual void OnDeleteError(Exception exception, object[] key)
        { }

        protected IHttpActionResult PutInternal(TItem item)
        {
            try
            {
                this.OnPutting(item);
                if (!this.ModelState.IsValid)
                {
                    return this.BadRequest(this.ModelState);
                }
                this.Repository.Update(item);
                return this.OnPutted(this.Updated(item));
            }
            catch (Exception exception)
            {
                this.OnPutError(exception, item);
                throw;
            }
        }

        protected virtual void OnPutting(TItem item)
        {}

        protected virtual IHttpActionResult OnPutted(UpdatedODataResult&lt;TItem&gt; result)
        {
            return result;
        }

        protected virtual void OnPutError(Exception exception, TItem item)
        { }

        protected IHttpActionResult PatchInternal(Delta&lt;TItem&gt; delta, params object[] key)
        {
            try
            {
                this.OnPatching(delta, key);
                if (!this.ModelState.IsValid)
                {
                    return this.BadRequest(this.ModelState);
                }
                TItem item = this.Repository.Update(delta, key);
                return this.OnPatched(this.Updated(item));
            }
            catch (Exception exception)
            {
                this.OnPatchError(exception, delta, key);
                throw;
            }
        }

        protected virtual void OnPatching(Delta&lt;TItem&gt; delta, object[] key)
        { }

        protected virtual IHttpActionResult OnPatched(UpdatedODataResult&lt;TItem&gt; result)
        {
            return result;
        }

        protected virtual void OnPatchError(Exception exception, Delta&lt;TItem&gt; delta, object[] key)
        { }

        protected override void Dispose(bool disposing)
        {
            this.Repository.Dispose();
            base.Dispose(disposing);
        }</value>
  </data>
  <data name="ODataRepository1" xml:space="preserve">
    <value>protected TContext DataContext { get; }

        protected ODataRepository(TContext dataContext = null)
        {
            this.DataContext = dataContext ?? Activator.CreateInstance&lt;TContext&gt;();
        }

        protected ODataRepository(ODataRepository&lt;TContext&gt; repository)
        {
            this.DataContext = repository.DataContext;
        }

        public void Dispose()
        {
            this.DataContext?.Dispose();
        }</value>
  </data>
  <data name="ODataRepository2" xml:space="preserve">
    <value>protected DbSet&lt;TItem&gt; DataSet { get; }

        protected ODataRepository(TContext dataContext = null)
            : base(dataContext)
        {
            this.DataSet = this.DataContext.Set&lt;TItem&gt;();
        }

        protected ODataRepository(ODataRepository&lt;TContext&gt; repository)
            : base(repository)
        {
            this.DataSet = this.DataContext.Set&lt;TItem&gt;();
        }

        public virtual TItem Create(TItem item)
        {
            TItem result = this.DataSet.Add(item);
            this.DataContext.SaveChanges();
            return result;
        }

        public virtual void Update(TItem item)
        {
            this.DataSet.AddOrUpdate(item);
            this.DataContext.SaveChanges();
        }

        public virtual IQueryable&lt;TItem&gt; Read()
        {
            return this.DataSet;
        }

        public virtual TItem Read(params object[] key)
        {
            return this.DataSet.Find(key);
        }

        public virtual IList&lt;TItem&gt; Update(IEnumerable&lt;TItem&gt; items)
        {
            List&lt;TItem&gt; list = items.ToList();
            foreach (TItem item in list)
            {
                this.DataSet.AddOrUpdate(item);
            }
            this.DataContext.SaveChanges();
            return list;
        }

        public virtual TItem Update(Delta&lt;TItem&gt; delta, object[] key)
        {
            TItem item = this.DataSet.Find(key);
            delta.Patch(item);
            this.Update(item);
            return item;
        }

        public virtual void Delete(TItem data)
        {
            this.DataSet.Remove(data);
        }

        public virtual void Delete(IEnumerable&lt;TItem&gt; items)
        {
            this.DataSet.RemoveRange(items);
        }

        public virtual void Delete(object[] key)
        {
            List&lt;PropertyInfo&gt; properties = this.GetPrimaryKey().ToList();
            if (properties.Count != key.Length)
                throw new ArgumentException($"Number of primary key fields not match. Expected {properties.Count}. Given {key.Length}", nameof(key));

            TItem item = Activator.CreateInstance&lt;TItem&gt;();
            foreach (PropertyInfo property in properties)
            {
                property.SetValue(item, key[properties.IndexOf(property)]);
            }
            this.DataSet.Attach(item);
            this.DataSet.Remove(item);
            this.DataContext.SaveChanges();
        }

        protected IEnumerable&lt;PropertyInfo&gt; GetPrimaryKey()
        {
            List&lt;Tuple&lt;int, PropertyInfo&gt;&gt; keys = new List&lt;Tuple&lt;int, PropertyInfo&gt;&gt;();
            PropertyInfo[] properties = typeof(TItem).GetProperties();
            foreach (PropertyInfo property in properties)
            {
                bool isKey = false;
                int order = 0;
                object[] attributes = property.GetCustomAttributes(true);
                foreach (object attribute in attributes)
                {
                    if (attribute is KeyAttribute)
                    {
                        isKey = true;
                    }
                    else if (attribute is ColumnAttribute)
                    {
                        order = ((ColumnAttribute)attribute).Order;
                    }
                }
                if (isKey)
                {
                    keys.Add(Tuple.Create(order, property));
                }
            }
            if (keys.Count == 0)
            {
                PropertyInfo id = properties.FirstOrDefault(x =&gt; x.Name.Equals("id", StringComparison.OrdinalIgnoreCase));
                if (id != null)
                {
                    keys.Add(Tuple.Create(0, id));
                }
            }
            return keys.OrderBy(x =&gt; x.Item1).Select(x =&gt; x.Item2);
        }</value>
  </data>
  <data name="ReadColumnsCommand" xml:space="preserve">
    <value>SELECT
    c.COLUMN_NAME,
    c.DATA_TYPE,
    c.IS_NULLABLE,
    c.ORDINAL_POSITION,
    c.CHARACTER_MAXIMUM_LENGTH,
    CASE WHEN p.ORDINAL_POSITION &gt; 0 THEN 1 ELSE 0 END AS IS_PRIMARY,
    f.CONSTRAINT_NAME as FOREIGN_NAME,
    f.FOREIGN_TABLE_NAME,
    COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA + '.' + c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') AS IS_IDENTITY,
    (CASE WHEN c.CHARACTER_SET_NAME = 'UNICODE' THEN 1 ELSE 0 END) AS IS_UNICODE,
    c.NUMERIC_PRECISION,
    c.NUMERIC_SCALE,
    c.COLUMN_DEFAULT
FROM INFORMATION_SCHEMA.COLUMNS as c
    LEFT JOIN (SELECT k.TABLE_SCHEMA, k.TABLE_NAME, k.COLUMN_NAME, k.ORDINAL_POSITION
                FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE as k
                    INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS as tc
                        ON k.CONSTRAINT_SCHEMA = tc.CONSTRAINT_SCHEMA
                            AND k.CONSTRAINT_NAME = tc.CONSTRAINT_NAME
                            AND tc.CONSTRAINT_TYPE = 'PRIMARY KEY') as p
        ON c.TABLE_SCHEMA = p.TABLE_SCHEMA
            AND c.TABLE_NAME = p.TABLE_NAME
            AND c.COLUMN_NAME = p.COLUMN_NAME
    LEFT JOIN (SELECT ccu.TABLE_SCHEMA, ccu.TABLE_NAME, ccu.COLUMN_NAME, ccu.CONSTRAINT_NAME, kcu.TABLE_NAME AS FOREIGN_TABLE_NAME
                FROM INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE ccu
                    INNER JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc
                        ON ccu.CONSTRAINT_NAME = rc.CONSTRAINT_NAME 
                    INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu 
                        ON kcu.CONSTRAINT_NAME = rc.UNIQUE_CONSTRAINT_NAME
                GROUP BY ccu.TABLE_SCHEMA, ccu.TABLE_NAME, ccu.COLUMN_NAME, ccu.CONSTRAINT_NAME, kcu.TABLE_NAME) as f
        ON c.TABLE_SCHEMA = f.TABLE_SCHEMA
            AND c.TABLE_NAME = f.TABLE_NAME
            AND c.COLUMN_NAME = f.COLUMN_NAME
WHERE c.TABLE_SCHEMA = @schema
    AND c.TABLE_NAME = @name;</value>
  </data>
  <data name="ReadParametersCommand" xml:space="preserve">
    <value>SELECT
	PARAMETER_NAME,
	DATA_TYPE,
	ORDINAL_POSITION
FROM INFORMATION_SCHEMA.PARAMETERS
WHERE SPECIFIC_SCHEMA = @schema
	AND SPECIFIC_NAME = @name;</value>
  </data>
  <data name="ReadResultCommand" xml:space="preserve">
    <value>select 
	s.[name] AS COLUMN_NAME,
	t.[name] AS DATA_TYPE,
	case when s.is_nullable = 1 then 'YES' else 'NO' end AS IS_NULLABLE,
	s.column_ordinal AS ORDINAL_POSITION,
	null AS CHARACTER_MAXIMUM_LENGTH,
	0 AS IS_PRIMARY,
	null as FOREIGN_NAME,
	null as FOREIGN_TABLE_NAME,
	0 as IS_IDENTITY,
	0 as IS_UNICODE,
	s.[precision] as NUMERIC_PRECISION,
	cast(s.scale as int) as NUMERIC_SCALE,
	null as COLUMN_DEFAULT
from sys.dm_exec_describe_first_result_set('exec {0}',NULL,1) as s
	left join sys.types as t
		on t.system_type_id = s.system_type_id
			and t.system_type_id = t.user_type_id</value>
  </data>
  <data name="ReadValuesCommand" xml:space="preserve">
    <value>SELECT {0}
FROM {1}.{2}</value>
  </data>
</root>