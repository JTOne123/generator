// tslint:disable

import { Address } from "./address";
import { HttpClient } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { Observable } from "rxjs";
import { Subject } from "rxjs";

@Injectable({
    providedIn: "root"
})
export class AddressService {
    private readonly http: HttpClient;
    public serviceUrl: string = "";

    public constructor(http: HttpClient) {
        this.http = http;
    }

    public get(query: string, httpOptions: {} = undefined): Observable<Address[]> {
        let subject = new Subject<Address[]>();
        this.http.get<Address[]>(this.serviceUrl + "/Address?" + query, httpOptions).subscribe(result => {
            const list: Address[] = [];
            for (const entry of result) {
            list.push(entry === null || entry === undefined ? undefined : new Address(entry));
            }
            subject.next(list);
            subject.complete();
        }, error => subject.error(error));
        return subject;
    }

    public post(model: Address, httpOptions: {} = undefined): Observable<void> {
        let subject = new Subject<void>();
        this.http.post<void>(this.serviceUrl + "/Address", model, httpOptions).subscribe(() => {
            subject.next();
            subject.complete();
        }, error => subject.error(error));
        return subject;
    }

    public put(model: Address, httpOptions: {} = undefined): Observable<void> {
        let subject = new Subject<void>();
        this.http.put<void>(this.serviceUrl + "/Address", model, httpOptions).subscribe(() => {
            subject.next();
            subject.complete();
        }, error => subject.error(error));
        return subject;
    }

    public patch(id: number, model: Address, httpOptions: {} = undefined): Observable<void> {
        let subject = new Subject<void>();
        this.http.patch<void>(this.serviceUrl + "/Address?Id=" + this.convertAny(id), model, httpOptions).subscribe(() => {
            subject.next();
            subject.complete();
        }, error => subject.error(error));
        return subject;
    }

    public delete(id: number, httpOptions: {} = undefined): Observable<void> {
        let subject = new Subject<void>();
        this.http.delete<void>(this.serviceUrl + "/Address?Id=" + this.convertAny(id), httpOptions).subscribe(() => {
            subject.next();
            subject.complete();
        }, error => subject.error(error));
        return subject;
    }

    public convertAny(value: any): string {
        return value === null || value === undefined ? "" : value.toString();
    }
}